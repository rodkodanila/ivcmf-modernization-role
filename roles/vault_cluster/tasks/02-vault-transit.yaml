- name: Install base packages
  apt:
    name: [curl, unzip, jq, nfs-common]
    update_cache: yes

- name: Create vault user
  user:
    name: vault
    system: true
    shell: /usr/sbin/nologin
    create_home: false

- name: Download Vault
  copy:
    src: "vault-1_20_3"
    dest: "/usr/bin/vault"
    mode: '0755'

- name: Ensure directories
  file:
    path: "{{ item }}"
    state: directory
    owner: vault
    group: vault
    mode: '0750'
  loop:
    - "{{ raft_storage.path }}"
    - /etc/vault.d


- name: Render vault config
  template:
    src: vault.hcl.j2
    dest: /etc/vault.d/vault.hcl
    owner: vault
    group: vault
    mode: '0640'

- name: Install vault systemd unit
  template:
    src: vault.service.j2
    dest: /etc/systemd/system/vault.service
    mode: '0644'

# - name: Mount NFS share
#   mount:
#     path: "{{ nfs_mount }}"
#     src: "{{ nfs_server }}"
#     fstype: nfs
#     opts: "rw,vers=4"
#     state: mounted

- name: Copy snapshot script
  template:
    src: vault_raft_snapshot_to_nfs.sh.j2
    dest: /usr/local/bin/vault_raft_snapshot_to_nfs.sh
    owner: root
    group: root
    mode: '0755'

- name: Setup cron for snapshot
  copy:
    dest: /etc/cron.d/vault-snapshot
    content: |
      0 3 * * * root /usr/local/bin/vault_raft_snapshot_to_nfs.sh >> /var/log/vault-snapshot.log 2>&1

- name: Enable and start vault
  systemd:
    daemon_reload: yes
    name: vault
    enabled: yes
    state: started


# - name: Ensure local cert workdir for transit exists
#   file:
#     path: "{{ playbook_dir }}/certs/transit"
#     state: directory
#     mode: '0755'
#   delegate_to: localhost

# - name: Load init.json if exists (local)
#   stat:
#     path: "{{ playbook_dir }}/certs/transit/transit-init.json"
#   register: transit_init_file
#   delegate_to: localhost

- name: Wait for API to be up
  uri:
    url: "https://127.0.0.1:8200/v1/sys/health"
    method: GET
    status_code: [200, 429, 472, 501]
    return_content: yes
    validate_certs: no
  register: vault_health
  retries: 12
  delay: 5
  until: vault_health.status is defined and (vault_health.status in [200, 429, 472, 501])


- name: Init transit vault (only if no local init.json)
  command: >
    /usr/bin/vault operator init -format=json -key-shares=1 -key-threshold=1
  register: transit_init
  environment:
    VAULT_ADDR: "https://127.0.0.1:8200"


- name: Save transit init.json locally
  copy:
    content: "{{ transit_init.stdout }}"
    dest: "{{ playbook_dir }}/transit-init.json"
    mode: '0600'
  delegate_to: localhost
  when:
    - transit_init.stdout is defined

# - name: Load transit keys from local file
#   slurp:
#     src: "{{ playbook_dir }}/certs/transit/transit-init.json"
#   register: transit_init_data
#   delegate_to: localhost

- debug:
    var: transit_init

- name: Parse initialization results
  set_fact:
    transit_unseal_key_b64: "{{ (transit_init.stdout | from_json).unseal_keys_b64[0] }}"
    transit_root_token: "{{ (transit_init.stdout | from_json).root_token }}"

# - debug:
#     msg:
#       - "Unseal key (b64): {{ transit_unseal_key_b64 }}"
#       - "Root token: {{ transit_root_token }}"

- name: Unseal transit vault
  command: >
    /usr/bin/vault operator unseal {{ transit_unseal_key_b64 }}
  environment:
    VAULT_ADDR: "https://127.0.0.1:8200"

- name: Enable transit secrets engine
  command: >
    /usr/bin/vault secrets enable transit
  register: enable_transit
  failed_when: enable_transit.rc not in [0,2]
  environment:
    VAULT_ADDR: "https://127.0.0.1:8200"
    VAULT_TOKEN: "{{ transit_root_token }}"

- name: Create transit key
  command: >
    /usr/bin/vault write -f transit/keys/{{ transit_key_name }}
  register: create_key
  failed_when: create_key.rc not in [0,2]
  environment:
    VAULT_ADDR: "https://127.0.0.1:8200"
    VAULT_TOKEN: "{{ transit_root_token }}"

- name: Create policy for transit seal
  command: >
    /usr/bin/vault policy write transit-seal-policy -
  args:
    stdin: |
      path "transit/encrypt/{{ transit_key_name }}" {
        capabilities = ["update"]
      }
      path "transit/decrypt/{{ transit_key_name }}" {
        capabilities = ["update"]
      }
  environment:
    VAULT_ADDR: "https://127.0.0.1:8200"
    VAULT_TOKEN: "{{ transit_root_token }}"

- name: Generate wrapped token for transit seal
  command: >
    /usr/bin/vault token create -orphan -policy=transit-seal-policy 
    -wrap-ttl=120 -period=24h -format=json
  environment:
    VAULT_ADDR: "https://127.0.0.1:8200"
    VAULT_TOKEN: "{{ transit_root_token }}"
  register: wrapped_token_result

- name: Parse wrapping token
  set_fact:
    wrapping_token: "{{ (wrapped_token_result.stdout | from_json).wrap_info.token }}"

- name: Unwrap the token to get final seal token
  command: >
    /usr/bin/vault unwrap -format=json {{ wrapping_token }}
  environment:
    VAULT_ADDR: "https://127.0.0.1:8200"
  register: unwrap_result

- name: Parse final seal token
  set_fact:
    seal_token: "{{ (unwrap_result.stdout | from_json).auth.client_token }}"